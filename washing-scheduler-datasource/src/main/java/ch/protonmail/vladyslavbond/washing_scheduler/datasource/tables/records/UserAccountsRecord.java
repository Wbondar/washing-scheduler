/**
 * This class is generated by jOOQ
 */
package ch.protonmail.vladyslavbond.washing_scheduler.datasource.tables.records;


import ch.protonmail.vladyslavbond.washing_scheduler.datasource.tables.UserAccounts;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAccountsRecord extends UpdatableRecordImpl<UserAccountsRecord> implements Record2<Short, Short> {

	private static final long serialVersionUID = -1409410858;

	/**
	 * Setter for <code>public.user_accounts.user_id</code>.
	 */
	public void setUserId(Short value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.user_accounts.user_id</code>.
	 */
	public Short getUserId() {
		return (Short) getValue(0);
	}

	/**
	 * Setter for <code>public.user_accounts.account_id</code>.
	 */
	public void setAccountId(Short value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.user_accounts.account_id</code>.
	 */
	public Short getAccountId() {
		return (Short) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<Short, Short> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Short, Short> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Short, Short> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Short> field1() {
		return UserAccounts.USER_ACCOUNTS.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Short> field2() {
		return UserAccounts.USER_ACCOUNTS.ACCOUNT_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Short value1() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Short value2() {
		return getAccountId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserAccountsRecord value1(Short value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserAccountsRecord value2(Short value) {
		setAccountId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserAccountsRecord values(Short value1, Short value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached UserAccountsRecord
	 */
	public UserAccountsRecord() {
		super(UserAccounts.USER_ACCOUNTS);
	}

	/**
	 * Create a detached, initialised UserAccountsRecord
	 */
	public UserAccountsRecord(Short userId, Short accountId) {
		super(UserAccounts.USER_ACCOUNTS);

		setValue(0, userId);
		setValue(1, accountId);
	}
}
