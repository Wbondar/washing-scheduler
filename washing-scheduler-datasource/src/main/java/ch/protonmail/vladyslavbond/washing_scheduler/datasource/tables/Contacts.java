/**
 * This class is generated by jOOQ
 */
package ch.protonmail.vladyslavbond.washing_scheduler.datasource.tables;


import ch.protonmail.vladyslavbond.washing_scheduler.datasource.Keys;
import ch.protonmail.vladyslavbond.washing_scheduler.datasource.Public;
import ch.protonmail.vladyslavbond.washing_scheduler.datasource.tables.records.ContactsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contacts extends TableImpl<ContactsRecord> {

	private static final long serialVersionUID = 1459305951;

	/**
	 * The reference instance of <code>public.contacts</code>
	 */
	public static final Contacts CONTACTS = new Contacts();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ContactsRecord> getRecordType() {
		return ContactsRecord.class;
	}

	/**
	 * The column <code>public.contacts.id</code>.
	 */
	public final TableField<ContactsRecord, Short> ID = createField("id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.contacts.type_id</code>.
	 */
	public final TableField<ContactsRecord, Short> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

	/**
	 * The column <code>public.contacts.owner_id</code>.
	 */
	public final TableField<ContactsRecord, Short> OWNER_ID = createField("owner_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

	/**
	 * The column <code>public.contacts.content</code>.
	 */
	public final TableField<ContactsRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * Create a <code>public.contacts</code> table reference
	 */
	public Contacts() {
		this("contacts", null);
	}

	/**
	 * Create an aliased <code>public.contacts</code> table reference
	 */
	public Contacts(String alias) {
		this(alias, CONTACTS);
	}

	private Contacts(String alias, Table<ContactsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Contacts(String alias, Table<ContactsRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ContactsRecord, Short> getIdentity() {
		return Keys.IDENTITY_CONTACTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ContactsRecord> getPrimaryKey() {
		return Keys.CONTACTS_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ContactsRecord>> getKeys() {
		return Arrays.<UniqueKey<ContactsRecord>>asList(Keys.CONTACTS_PKEY, Keys.CONTACTS_CONTENT_KEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ContactsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ContactsRecord, ?>>asList(Keys.CONTACTS__CONTACTS_TYPE_ID_FKEY, Keys.CONTACTS__CONTACTS_OWNER_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Contacts as(String alias) {
		return new Contacts(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Contacts rename(String name) {
		return new Contacts(name, null);
	}
}
