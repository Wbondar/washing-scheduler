/**
 * This class is generated by jOOQ
 */
package ch.protonmail.vladyslavbond.washing_scheduler.datasource.tables;


import ch.protonmail.vladyslavbond.washing_scheduler.datasource.Keys;
import ch.protonmail.vladyslavbond.washing_scheduler.datasource.Public;
import ch.protonmail.vladyslavbond.washing_scheduler.datasource.tables.records.AccountsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accounts extends TableImpl<AccountsRecord> {

	private static final long serialVersionUID = -495318834;

	/**
	 * The reference instance of <code>public.accounts</code>
	 */
	public static final Accounts ACCOUNTS = new Accounts();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AccountsRecord> getRecordType() {
		return AccountsRecord.class;
	}

	/**
	 * The column <code>public.accounts.id</code>.
	 */
	public final TableField<AccountsRecord, Short> ID = createField("id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.accounts.provider_id</code>.
	 */
	public final TableField<AccountsRecord, Short> PROVIDER_ID = createField("provider_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

	/**
	 * The column <code>public.accounts.external_id</code>.
	 */
	public final TableField<AccountsRecord, Long> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * Create a <code>public.accounts</code> table reference
	 */
	public Accounts() {
		this("accounts", null);
	}

	/**
	 * Create an aliased <code>public.accounts</code> table reference
	 */
	public Accounts(String alias) {
		this(alias, ACCOUNTS);
	}

	private Accounts(String alias, Table<AccountsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Accounts(String alias, Table<AccountsRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AccountsRecord, Short> getIdentity() {
		return Keys.IDENTITY_ACCOUNTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AccountsRecord> getPrimaryKey() {
		return Keys.ACCOUNTS_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AccountsRecord>> getKeys() {
		return Arrays.<UniqueKey<AccountsRecord>>asList(Keys.ACCOUNTS_PKEY, Keys.ACCOUNTS_PROVIDER_ID_EXTERNAL_ID_KEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AccountsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AccountsRecord, ?>>asList(Keys.ACCOUNTS__ACCOUNTS_PROVIDER_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Accounts as(String alias) {
		return new Accounts(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Accounts rename(String name) {
		return new Accounts(name, null);
	}
}
