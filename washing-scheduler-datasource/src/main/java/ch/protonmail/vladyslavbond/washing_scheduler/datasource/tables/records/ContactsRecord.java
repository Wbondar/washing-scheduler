/**
 * This class is generated by jOOQ
 */
package ch.protonmail.vladyslavbond.washing_scheduler.datasource.tables.records;


import ch.protonmail.vladyslavbond.washing_scheduler.datasource.tables.Contacts;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactsRecord extends UpdatableRecordImpl<ContactsRecord> implements Record4<Short, Short, Short, String> {

	private static final long serialVersionUID = 1608790522;

	/**
	 * Setter for <code>public.contacts.id</code>.
	 */
	public void setId(Short value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.contacts.id</code>.
	 */
	public Short getId() {
		return (Short) getValue(0);
	}

	/**
	 * Setter for <code>public.contacts.type_id</code>.
	 */
	public void setTypeId(Short value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.contacts.type_id</code>.
	 */
	public Short getTypeId() {
		return (Short) getValue(1);
	}

	/**
	 * Setter for <code>public.contacts.owner_id</code>.
	 */
	public void setOwnerId(Short value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.contacts.owner_id</code>.
	 */
	public Short getOwnerId() {
		return (Short) getValue(2);
	}

	/**
	 * Setter for <code>public.contacts.content</code>.
	 */
	public void setContent(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>public.contacts.content</code>.
	 */
	public String getContent() {
		return (String) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Short> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Short, Short, Short, String> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Short, Short, Short, String> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Short> field1() {
		return Contacts.CONTACTS.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Short> field2() {
		return Contacts.CONTACTS.TYPE_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Short> field3() {
		return Contacts.CONTACTS.OWNER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Contacts.CONTACTS.CONTENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Short value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Short value2() {
		return getTypeId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Short value3() {
		return getOwnerId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getContent();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContactsRecord value1(Short value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContactsRecord value2(Short value) {
		setTypeId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContactsRecord value3(Short value) {
		setOwnerId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContactsRecord value4(String value) {
		setContent(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContactsRecord values(Short value1, Short value2, Short value3, String value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ContactsRecord
	 */
	public ContactsRecord() {
		super(Contacts.CONTACTS);
	}

	/**
	 * Create a detached, initialised ContactsRecord
	 */
	public ContactsRecord(Short id, Short typeId, Short ownerId, String content) {
		super(Contacts.CONTACTS);

		setValue(0, id);
		setValue(1, typeId);
		setValue(2, ownerId);
		setValue(3, content);
	}
}
